!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADD	cpucore.h	12;"	d
ADDI	cpucore.h	13;"	d
AND	cpucore.h	19;"	d
ANDI	cpucore.h	23;"	d
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -std=gnu99 -g$/;"	m
CPUID	cpucore.h	/^    uint32_t  CPUID;$/;"	m	struct:_cpu
DISPLAY_H	display.h	9;"	d
DIV	cpucore.h	16;"	d
EQUAL	cpucore.h	42;"	d
EXECS	Makefile	/^EXECS = mirriros$/;"	m
EXIT_IF_ADDR_BIGGER	memory.c	32;"	d	file:
GREAT	cpucore.h	33;"	d
GREATE	cpucore.h	35;"	d
GREATEU	cpucore.h	40;"	d
GREATU	cpucore.h	38;"	d
JMP	cpucore.h	44;"	d
LDFLAGS	Makefile	/^LDFLAGS = -lpthread -lncurses$/;"	m
LESS	cpucore.h	32;"	d
LESSE	cpucore.h	34;"	d
LESSEU	cpucore.h	39;"	d
LESSU	cpucore.h	37;"	d
LUI	cpucore.h	49;"	d
LWORD	cpucore.h	47;"	d
L_KEYBOARD_H	keyboard.h	9;"	d
L_MEMORY_H	memory.h	9;"	d
L_SCREEN_H	screen.h	9;"	d
MB_SIZE	memory.h	11;"	d
MEMORY_CONSOLE_HIGH	display.c	16;"	d	file:
MEMORY_CONSOLE_STARTX	display.c	18;"	d	file:
MEMORY_CONSOLE_STARTY	display.c	19;"	d	file:
MEMORY_CONSOLE_WIDTH	display.c	17;"	d	file:
MOD	cpucore.h	17;"	d
MOV	cpucore.h	46;"	d
MUL	cpucore.h	15;"	d
NOT	cpucore.h	21;"	d
OBJS	Makefile	/^OBJS = memory.o cpucore.o display.o $/;"	m
OR	cpucore.h	20;"	d
ORI	cpucore.h	24;"	d
PC	cpucore.h	/^    uint32_t  PC;$/;"	m	struct:_cpu
PWD	cpucore.h	/^    uint32_t  PWD;$/;"	m	struct:_cpu
PWD_DIVZERO	cpucore.h	55;"	d
PWD_INVINST	cpucore.h	57;"	d
PWD_MODZERO	cpucore.h	56;"	d
RD	cpucore.h	52;"	d
REG_CONSOLE_HIGH	display.c	21;"	d	file:
REG_CONSOLE_STARTX	display.c	23;"	d	file:
REG_CONSOLE_STARTY	display.c	24;"	d	file:
REG_CONSOLE_WIDTH	display.c	22;"	d	file:
RS	cpucore.h	53;"	d
RT	cpucore.h	54;"	d
SAL	cpucore.h	29;"	d
SAR	cpucore.h	30;"	d
SLL	cpucore.h	27;"	d
SLR	cpucore.h	28;"	d
SUB	cpucore.h	14;"	d
SWORD	cpucore.h	48;"	d
UEQUAL	cpucore.h	43;"	d
USER_CONSOLE_HIGH	display.c	11;"	d	file:
USER_CONSOLE_STARTX	display.c	13;"	d	file:
USER_CONSOLE_STARTY	display.c	14;"	d	file:
USER_CONSOLE_WIDTH	display.c	12;"	d	file:
WORKER_SET_SIZE	display.c	9;"	d	file:
XOR	cpucore.h	22;"	d
XORI	cpucore.h	25;"	d
_CPUCORE_H	cpucore.h	9;"	d
_INCLUDES_H	includes.h	9;"	d
_cpu	cpucore.h	/^typedef struct _cpu$/;"	s
_keyboard	keyboard.h	/^typedef struct _keyboard$/;"	s
_memory	memory.h	/^typedef struct _memory$/;"	s
_screen	screen.h	/^typedef struct _screen$/;"	s
buffer_size	keyboard.h	/^    uint32_t  buffer_size;$/;"	m	struct:_keyboard
buffer_size	screen.h	/^    uint32_t buffer_size;$/;"	m	struct:_screen
cpu	display.h	/^    cpu_t * cpu;$/;"	m	struct:__anon1
cpu	keyboard.h	/^    cpucore_t * cpu;$/;"	m	struct:_keyboard
cpu_main_loop	cpucore.c	/^void * cpu_main_loop(void * arg)$/;"	f
cpu_t	cpucore.h	/^}cpu_t;$/;"	t	typeref:struct:_cpu
exectued	cpucore.c	/^static void exectued(cpu_t * cpu, uint32_t in)$/;"	f	file:
exit_if_ptr_is_null	memory.c	/^void exit_if_ptr_is_null(void * ptr,const char * message) $/;"	f
get_keyboard	keyboard.c	/^keyboard_t * get_keyboard(void)$/;"	f
get_screen	screen.c	/^screen_t * get_screen(void)$/;"	f
getfetch	cpucore.c	/^static uint32_t getfetch(cpu_t * cpu)$/;"	f	file:
height	display.h	/^    int height;$/;"	m	struct:__anon1
id	keyboard.h	/^    pthread_t id;$/;"	m	struct:_keyboard
init_cpu	cpucore.c	/^cpu_t * init_cpu(uint32_t cpuid,uint32_t pc,memory_t * memory)$/;"	f
init_keyboard	keyboard.c	/^keyboard_t * init_keyboard(void)$/;"	f
init_memory	memory.c	/^memory_t * init_memory(uint32_t size)$/;"	f
init_screen	display.c	/^window_t * init_screen()$/;"	f
init_screen	screen.c	/^screen_t * init_screen(void)$/;"	f
kbhit	keyboard.c	/^static int kbhit(void)$/;"	f	file:
keyboard_loop	keyboard.c	/^void * keyboard_loop(void * arg)$/;"	f
keyboard_t	keyboard.h	/^}keyboard_t;$/;"	t	typeref:struct:_keyboard
m_flag	screen.h	/^    uint32_t m_flag;$/;"	m	struct:_screen
main	memory_test.c	/^int main(int argc, char ** argv)$/;"	f
main	mirriros.c	/^int main(int argc,char ** argv)$/;"	f
mem_console_main_loop	display.c	/^void * mem_console_main_loop(window_t * win)$/;"	f
memory	cpucore.h	/^    memory_t  * memory;$/;"	m	struct:_cpu
memory	keyboard.h	/^    memory_t  * memory;$/;"	m	struct:_keyboard
memory	memory.h	/^    uint8_t * memory;$/;"	m	struct:_memory
memory	screen.h	/^    memory_t * memory;$/;"	m	struct:_screen
memory_t	memory.h	/^}memory_t;$/;"	t	typeref:struct:_memory
mmap_start	keyboard.h	/^    uint32_t  mmap_start;$/;"	m	struct:_keyboard
mmio_start	keyboard.h	/^    uint32_t  mmio_start;$/;"	m	struct:_keyboard
read_memory_16	memory.c	/^uint16_t read_memory_16(memory_t * m, uint32_t addr)$/;"	f
read_memory_32	memory.c	/^uint32_t read_memory_32(memory_t * m, uint32_t addr)$/;"	f
read_memory_8	memory.c	/^uint8_t read_memory_8(memory_t * m, uint32_t addr)$/;"	f
read_pos_reg	keyboard.h	/^    uint32_t  read_pos_reg;$/;"	m	struct:_keyboard
reg	cpucore.h	/^    uint32_t  reg[32];$/;"	m	struct:_cpu
reg_console_main_loop	display.c	/^void * reg_console_main_loop(window_t * win)$/;"	f
screen_main_loop	screen.c	/^void * screen_main_loop(void * arg)$/;"	f
screen_mmap_start	screen.h	/^    uint32_t screen_mmap_start;$/;"	m	struct:_screen
screen_mmio_start	screen.h	/^    uint32_t screen_mmio_start;$/;"	m	struct:_screen
screen_t	screen.h	/^}screen_t;$/;"	t	typeref:struct:_screen
signedimm	cpucore.c	/^static inline int32_t signedimm(uint32_t instruction)$/;"	f	file:
signedjmpimm	cpucore.c	/^static inline int32_t signedjmpimm(uint32_t instruction)$/;"	f	file:
size	memory.h	/^    uint32_t size;$/;"	m	struct:_memory
startx	display.h	/^    int startx;$/;"	m	struct:__anon1
starty	display.h	/^    int starty;$/;"	m	struct:__anon1
user_console_main_loop	display.c	/^void * user_console_main_loop(window_t * win)$/;"	f
width	display.h	/^    int width;$/;"	m	struct:__anon1
win	display.h	/^    WINDOW * win;$/;"	m	struct:__anon1
window_t	display.h	/^}window_t;$/;"	t	typeref:struct:__anon1
write_memory_16	memory.c	/^void write_memory_16(memory_t * m, uint32_t addr,uint16_t  value)$/;"	f
write_memory_32	memory.c	/^void write_memory_32(memory_t * m, uint32_t addr,uint32_t  value)$/;"	f
write_memory_8	memory.c	/^void write_memory_8(memory_t * m, uint32_t addr,uint8_t  value)$/;"	f
write_pos_reg	keyboard.h	/^    uint32_t  write_pos_reg;$/;"	m	struct:_keyboard
write_screen	screen.c	/^static void write_screen(screen_t * s)$/;"	f	file:
zeroeximm	cpucore.c	/^static inline uint32_t zeroeximm(uint32_t instruction)$/;"	f	file:
